#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/Verifier.h>
#include <llvm/Support/raw_ostream.h>
#include <llvm/Transforms/Utils/Cloning.h>

#include <list>

#include "idallvm/passes/InlineOpcodeCalls.h"
#include "idallvm/passes.h"

using std::list;

using llvm::Function;
using llvm::CallInst;
using llvm::BasicBlock;
using llvm::Instruction;
using llvm::InlineFunctionInfo;
using llvm::InlineFunction;
using llvm::FunctionPass;
using llvm::RegisterPass;
using llvm::verifyFunction;
using llvm::dyn_cast;
using llvm::errs;

char InlineOpcodeCalls::ID = 0;

InlineOpcodeCalls::InlineOpcodeCalls() : FunctionPass(ID) 
{
}

bool InlineOpcodeCalls::runOnFunction(Function& f)
{
    list<CallInst*> instructionsToInline;

    for (BasicBlock& bb : f) {
        for (Instruction& inst : bb) {
            if (CallInst* callInst = dyn_cast<CallInst>(&inst)) {
                instructionsToInline.push_back(callInst);
            }
        }
    }

    for (CallInst* callInst : instructionsToInline) {
        InlineFunctionInfo inlineFunctionInfo;
        InlineFunction(callInst, inlineFunctionInfo);
    }

    return true;
}

void InlineOpcodeCalls::getAnalysisUsage(llvm::AnalysisUsage &AU) const
{
}

FunctionPass* createInlineOpcodeCallsPass(void)
{
    return new InlineOpcodeCalls();
}

static RegisterPass<InlineOpcodeCalls> passInfo("InlineOpcodeCalls", "Inlines the opcode calls generated by the translation from an IDA to an LLVM function", false, false);
